import telebot
from telebot import types
import webbrowser
import random
import textwrap
import re
import os

bot = telebot.TeleBot(os.getenv("BOT_TOKEN"))

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—á–µ—Ä–µ–¥–∏
shuffled_phrases = []
current_index = 0
BOT_USERNAME = 'djprognoz_bot'  # –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–µ–≥–æ


@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id,
                     '–ü—Ä–∏–≤–µ—Ç! –Ø - –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π —è—Å–Ω–æ–≤–∏–¥—è—â–∏–π –±–æ—Ç –∏ –º–æ–≥—É –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞—Ç—å –±—É–¥—É—â–µ–µ. –ú–æ–≥—É –ø–æ–≥–∞–¥–∞—Ç—å –≤ –ª–∏—á–∫–µ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /future, –Ω–æ –ª—É—á—à–µ –≤—Å–µ–≥–æ –≤—ã–∑—ã–≤–∞–π –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ —Å —Ç–≤–æ–∏–º–∏ –¥—Ä—É–∑—å—è–º–∏ —á–µ—Ä–µ–∑ @djprognoz_bot')


def load_and_shuffle_phrases():
    with open('phrases.txt', 'r', encoding='UTF-8') as file:
        phrases = [line.strip() for line in file if line.strip()]
    random.shuffle(phrases)
    return phrases


@bot.inline_handler(func=lambda query: True)
def inline_query_handler(inline_query):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª –∑–∞–ø—Ä–æ—Å
        user_name = inline_query.from_user.username or inline_query.from_user.first_name or "–≥–æ—Å—Ç—å"

        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ—Ä–∞–∑ –∏–∑ —Ñ–∞–π–ª–∞
        phrases = load_and_shuffle_phrases()

        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ñ—Ä–∞–∑—É
        random_phrase = random.choice(phrases)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∏ –º—É–∑—ã–∫–∏
        music_match = re.search(r'(–ú—É–∑—ã–∫–∞:|Music:)\s*(.*?)\s*\|\s*(https?://[^\s]+)', random_phrase, re.IGNORECASE)
        if music_match:
            track_name = music_match.group(2).strip()
            track_link = music_match.group(3).strip()
            main_text = random_phrase[:music_match.start()].strip()
        else:
            track_name = ""
            track_link = ""
            main_text = random_phrase

        # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        sentences = re.split(r'(?<=[.!?]) +', main_text)
        if len(sentences) > 1:
            main = " ".join(sentences[:-1]).strip()
            last = sentences[-1].strip()
            formatted = f"{main}{last}"
        else:
            formatted = f"{main_text}"

        # –ë–ª–æ–∫ –º—É–∑—ã–∫–∏
        if track_name and track_link:
            music_block = f"\n\n*–ú—É–∑—ã–∫–∞: {track_name}*\n[üéß –ü–æ—Å–ª—É—à–∞—Ç—å —Ç—Ä–µ–∫]({track_link})"
        else:
            music_block = ""

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞—â–µ–Ω–∏–µ–º –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        text = f"üîÆ –í–æ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è @{user_name}:\n\n{formatted}{music_block}"

        # –°–æ–∑–¥–∞—ë–º –∏–Ω–ª–∞–π–Ω-—Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = types.InlineQueryResultArticle(
            id='1',
            title="–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ",
            input_message_content=types.InputTextMessageContent(
                message_text=text,
                parse_mode='Markdown'
            ),
            description="–ù–∞–∂–º–∏, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ",
            thumbnail_url="https://i.imgur.com/4M34hi2.png"  # –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–∫–æ–Ω–∫—É
        )

        bot.answer_inline_query(inline_query.id, [result], cache_time=1)
    except Exception as e:
        print(e)


@bot.message_handler(commands=['future'])
def future(message):
    chat_type = message.chat.type
    user = message.from_user
    command_text = message.text.lower()

    # –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_name = user.username or user.first_name or "–≥–æ—Å—Ç—å"
    # –í –≥—Ä—É–ø–ø–∞—Ö ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –ª–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏–º–µ–Ω–Ω–æ —ç—Ç–æ–≥–æ –±–æ—Ç–∞
    if chat_type in ['group', 'supergroup']:
        if f'/future@{BOT_USERNAME.lower()}' not in command_text:
            return  # –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–µ–∑ —Ç–æ—á–Ω–æ–≥–æ —Ç–µ–≥–∞

    # –¢–∏–ø —á–∞—Ç–∞: private, group, supergroup, channel
    if chat_type == "private":
        greeting = f"üîÆ @{user_name}, –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è —Ç–µ–±—è:"
    elif chat_type in ["group", "supergroup"]:
        greeting = f"üîÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è @{user_name} –≤ –≥—Ä—É–ø–ø–µ"
    else:
        greeting = f"üîÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ!"

    # –î–∞–ª–µ–µ ‚Äî –æ–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    with open('phrases.txt', 'r', encoding='UTF-8') as file:
        phrases = [line.strip() for line in file if line.strip()]

    # –ü–µ—Ä–µ—Ç–∞—Å–æ–≤–∫–∞ –∏ –≤—ã–±–æ—Ä –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–æ–≤ ‚Äî –º–æ–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ—é –æ—á–µ—Ä–µ–¥—å —Ç—É—Ç
    random_phrase = random.choice(phrases)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∏ –º—É–∑—ã–∫–∏
    music_match = re.search(r'(–ú—É–∑—ã–∫–∞:|Music:)\s*(.*?)\s*\|\s*(https?://[^\s]+)', random_phrase, re.IGNORECASE)
    if music_match:
        track_name = music_match.group(2).strip()
        track_link = music_match.group(3).strip()
        main_text = random_phrase[:music_match.start()].strip()
    else:
        track_name = ""
        track_link = ""
        main_text = random_phrase

    # –î–µ–ª–∏–º –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    sentences = re.split(r'(?<=[.!?]) +', main_text)
    if len(sentences) > 1:
        main = " ".join(sentences[:-1]).strip()
        last = sentences[-1].strip()
        formatted = f"{main}{last}"
    else:
        formatted = f"{main_text}"

    # –ë–ª–æ–∫ –º—É–∑—ã–∫–∏
    if track_name and track_link:
        music_block = f"\n\n*–ú—É–∑—ã–∫–∞: {track_name}*\n[üéß –ü–æ—Å–ª—É—à–∞—Ç—å —Ç—Ä–µ–∫]({track_link})"
    else:
        music_block = ""

    # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    final_message = f"{greeting}\n\n{formatted}{music_block}"

    bot.reply_to(message, final_message, parse_mode='Markdown')


bot.polling(none_stop=True)